esp8266:
  board: esp01_1m

esphome:
  name: carrier-ac
  friendly_name: carrier_ac

packages:
  basic: !include
    file: includes/basic.yaml
    vars:
      # secrets don't support substitution
      # CHANGE THIS TO THE NAME OF THE DEVICE!!!
      <<: !secret carrier_ac_params
      ap_ssid: Carrier-Ac
  em_base: !include includes/logic/energy_management/base.yaml
  action_queue_include: !include
    file: includes/hacks/include_for_globals.yaml
    vars:
      include_dummy_id: __dummy_id_action_queue__
      include_file: includes/logic/action_queue.hpp
      include_file_name: action_queue.hpp

# Disable logging over UART (required)
logger:
  baud_rate: 0

# UART settings for Midea dongle (required)
uart:
  tx_pin: 1         # hardware dependant
  rx_pin: 3         # hardware dependant
  baud_rate: 9600

# Main settings
climate:
- platform: midea
  id: carrier_ac
  name: Midea Climate         # Use a unique name.
  autoconf: true              # Autoconfigure most options.
  beeper: true                # Beep on commands.
  supported_modes:            # Optional. All capabilities in this section may be detected by autoconf.
  - FAN_ONLY
  - HEAT_COOL
  - COOL
  - HEAT
  - DRY
  custom_fan_modes:           # Optional
  - SILENT
  - TURBO
  supported_presets:          # Optional. All capabilities in this section may be detected by autoconf.
  - ECO
  - BOOST
  - SLEEP
  supported_swing_modes:      # Optional
  - VERTICAL
  outdoor_temperature:        # Optional. Outdoor temperature sensor (may display incorrect values after long inactivity).
    name: Temp
  humidity_setpoint:          # Optional. Indoor humidity sensor (only for devices that support this feature).
    name: Humidity
  on_state:
    lambda: |-
      bool turn_on = x.mode != CLIMATE_MODE_OFF;
      id(switch_action_queue).on_state_update(turn_on);

switch:
- platform: template
  id: device_on_optimistic
  name: Device on (optimistic)
  optimistic: False
  entity_category: diagnostic
  turn_on_action:
    lambda: |-
      id(on_update_from_switch)(true, *id(device_on_optimistic));
  turn_off_action:
    lambda: |-
      id(on_update_from_switch)(false, *id(device_on_optimistic));

energy_management:
  id: $id_em
  set_device_state:
    lambda: |-
      bool prev = id(device_on_optimistic).state;
      id(on_update_from_em)(switch_to, *id(device_on_optimistic));
      return prev;

script:
- id: delayed_action
  parameters:
    turn_on: bool
  mode: restart
  then:
  - lambda: ESP_LOGD("main::delayed_action", "Queueing turn %s action", turn_on ? "on" :"off");
  - delay: 1s
  - while:
      condition:
        lambda: return true;
      then:
      - lambda: |-
          ESP_LOGD("main", "Requesting turn %s action", turn_on ? "on" :"off");
          id(on_action_sent)();
          if (turn_on) {
            id(carrier_ac).do_power_on();
          } else {
            id(carrier_ac).do_power_off();
          }
      - delay: 4s

globals:
- id: switch_action_queue
  type: action_queue::SingleDepthBinaryActionQueue
  initial_value: |-
    action_queue::SingleDepthBinaryActionQueue(
      // send_action
      ([](bool turn_on, action_queue::SingleDepthBinaryActionQueue::on_action_sent_t &&callback) {
        ESP_LOGD("main::send_action", "Requesting turn %s action", turn_on ? "on" :"off");
        id(on_action_sent) = std::move(callback);
        id(delayed_action).execute(turn_on);
      }),
      // cancel_action
      ([]() {
        ESP_LOGD("main::cancel_action", "Cancelling delayed action");
        id(delayed_action).stop();
      }),
      // send_external_state_update
      ([](bool turn_on) {
        id(on_update_from_external)(turn_on, id(device_on_optimistic));
      })
    )
- id: on_update_from_em
  type: std::function<void(bool, switch_::Switch&)>
  initial_value: |-
    [](bool turn_on, switch_::Switch &sw) {
        bool relevant = turn_on != sw.state;
        ESP_LOGD("main::switch_update_action", "Update from energy management");
        if (relevant) {
          ESP_LOGD("main::switch_update_action", "Toggling action queue");
          id(switch_action_queue).toggle();
        }
        sw.publish_state(turn_on);
        return;
    }
- id: on_update_from_external
  type: std::function<void(bool, switch_::Switch&)>
  initial_value: |-
    [](bool turn_on, switch_::Switch &sw) {
        ESP_LOGD("main::on_update_from_external", "External update came from action queue");
        bool allow = turn_on == id($id_em).set_device_state(turn_on);
        ESP_LOGD("main::on_update_from_external", "Update %sallowed by energy management", allow ? "" :"dis");
        if (allow) {
          sw.publish_state(turn_on);
          return;
        }
        ESP_LOGD("main::on_update_from_external", "Reverting update");
        id(switch_action_queue).toggle();
        return;
    }
- id: on_update_from_switch
  type: std::function<void(bool, switch_::Switch&)>
  initial_value: |-
    [](bool turn_on, switch_::Switch &self) {
      bool relevant = turn_on != self.state;
      bool allow = turn_on == id($id_em).set_device_state(turn_on);
      if (!relevant) {
        ESP_LOGD("main::on_update_from_switch", "Irrelevant turn %s update", turn_on ? "on" :"off");
        return;
      }
      ESP_LOGD("main::on_update_from_switch", "Manual switch update %sallowed by energy management", allow ? "" :"dis");
      if (!allow) return;

      id(switch_action_queue).toggle();
      self.publish_state(turn_on);
    }
- id: on_action_sent
  type: std::function<void()>
  initial_value: |-
    []() { return; }

button:
- platform: template
  name: Turn on
  on_press:
    lambda: id(carrier_ac).do_power_on();
- platform: template
  name: Turn off
  on_press:
    lambda: id(carrier_ac).do_power_off();